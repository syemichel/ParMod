domain waterworld {
	requirements = {
    	concurrent,           // this domain permits multiple non-default actions
        continuous,           // this domain uses real-valued parameterized variables
        cpf-deterministic,    // this domain uses deterministic conditional functions for transitions
        intermediate-nodes,   // this domain uses intermediate pvariable nodes
        reward-deterministic  // this domain does not use a stochastic reward
    };
    types {
    ball: object; //b1, b2, b3...
    dim : object; //x, y
    state: {@q1, @q2, @q3, @q4, @q5, @q6, @q7, @q8, @q9, @q10, @q11, @q12, @q13, @q14, @q15, @q16, @q17, @q18, @q19, @q20, @q21, @q22, @q23, @q24, @q25, @q26, @q27};
     state1: {@1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11};
    };
    pvariables {
    	//field setting
    	MIN-ACTION-BOUND: { non-fluent, real, default = -3.5 };
        MAX-ACTION-BOUND: { non-fluent, real, default =  3.5 };
        MIN-VELO-BOUND: { non-fluent, real, default = -3.5 };
        MAX-VELO-BOUND: {non-fluent, real, default = 3.5};
        MAX-FIELD-WIDTH: {non-fluent, real, default = 25};
       //ball setting
        BALL-RADIUS: {non-fluent, real, default= 0.5};
        R1(ball) : { non-fluent, bool, default = false };
        R2(ball) : { non-fluent, bool, default = false };
        R3(ball) : { non-fluent, bool, default = false };
        R4(ball) : { non-fluent, bool, default = false };
        R5(ball) : { non-fluent, bool, default = false };
        R6(ball) : { non-fluent, bool, default = false };
        R7(ball) : { non-fluent, bool, default = false };
        R8(ball) : { non-fluent, bool, default = false };
        ba-velo(ball, dim): {state-fluent, real, default = 0.0};
        ba-loc(ball, dim): {state-fluent, real, default = 0.0};
        if-crash(ball, dim): { interm-fluent, real};
        ba-ag-crash(ball): { interm-fluent, bool};

       //agent setting
        ag-loc(dim): { state-fluent, real, default = 0.0 };
        ag-velo(dim): { state-fluent, real, default = 0.0 };
        ag-move(dim): { action-fluent, real, default = 0.0 };
        if-ag-crash(dim): { interm-fluent, real, level = 1};
        //automata states
    	p1:  { interm-fluent, bool };
        p2:  { interm-fluent, bool };
        p3:  { interm-fluent, bool };
        p4:  { interm-fluent, bool };
        p5:  { interm-fluent, bool };
        p6:  { interm-fluent, bool };
        p7:  { interm-fluent, bool };
        p8:  { interm-fluent, bool };
    	as : {state-fluent, state1, default = @1};
    	pas : {state-fluent, state1, default = @1};
    	ds : {interm-fluent, state};
    	pds : {state-fluent, state, default = @q1};


    };
    cpfs{
    	//ball-move

    	if-crash(?b, ?d) = if(ba-loc(?b, ?d) + ba-velo(?b, ?d) >= MAX-FIELD-WIDTH)
    						then 1
    						else [
    							if(ba-loc(?b, ?d) + ba-velo(?b, ?d) <= 0)
    							then 2
    							else 0
    						];

    	ba-loc'(?b, ?d) = if(if-crash(?b, ?d)==0)
    						then ba-loc(?b, ?d) + ba-velo(?b, ?d)
    						else[
    							if(if-crash(?b, ?d)==1)
    							then MAX-FIELD-WIDTH
    							else 0
    						];

    	ba-velo'(?b, ?d) = if(if-crash(?b, ?d)~=0)
    						then -ba-velo(?b, ?d)
    						else ba-velo(?b, ?d);

    	ba-ag-crash(?b) = if(forall_{?d:dim}((ba-loc(?b, ?d) - ag-loc(?d) <= BALL-RADIUS * 2) ^ (ba-loc(?b, ?d) - ag-loc(?d) >= -BALL-RADIUS*2) ))
    				then true
    				else false;


    	//agent move
    	if-ag-crash(?d) = if(ag-loc(?d) + ag-velo(?d) >= MAX-FIELD-WIDTH)
    						then 1
    						else [
    							if(ag-loc(?d) + ag-velo(?d) <= 0)
    							then 2
    							else 0
    						];

    	ag-loc'(?d) = if(if-ag-crash(?d)==0)
    						then ag-loc(?d) + ag-velo(?d)
    						else[
    							if(if-ag-crash(?d)==1)
    							then MAX-FIELD-WIDTH
    							else 0
    						];

    	ag-velo'(?d) = if(if-ag-crash(?d)~=0)
    						then -ag-velo(?d)
    						else ag-move(?d);

    //event setting
	p1 =
		if(exists_{?b:ball}(R1(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p2 =
	    if(exists_{?b:ball}(R2(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p3 = if(exists_{?b:ball}(R3(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

    p4 =
		if(exists_{?b:ball}(R4(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p5 =
	    if(exists_{?b:ball}(R5(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p6 = if(exists_{?b:ball}(R6(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p7 =
	    if(exists_{?b:ball}(R7(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p8 = if(exists_{?b:ball}(R8(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

    // DFA translation
    ds =
    if(pds==@q1 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q1
else if(pds==@q1 ^ ((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p1) | (p6 & ~p5) | (p7 & ~p5) | (p8 & ~p5))) then @q2
else if(pds==@q1 ^ (p5 & ~p1 & ~p2 & ~p3 & ~p4)) then @q3
else if(pds==@q1 ^ (p1 & ~p5 & ~p6 & ~p7 & ~p8)) then @q4
else if(pds==@q1 ^ (p1 & p5)) then @q5
else if(pds==@q2 ^ (true)) then @q2
else if(pds==@q3 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q3
else if(pds==@q3 ^ ((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p1) | (p5 & ~p6) | (p7 & ~p6) | (p8 & ~p6))) then @q2
else if(pds==@q3 ^ (p6 & ~p1 & ~p2 & ~p3 & ~p4)) then @q6
else if(pds==@q3 ^ (p1 & ~p5 & ~p6 & ~p7 & ~p8)) then @q5
else if(pds==@q3 ^ (p1 & p6)) then @q7
else if(pds==@q4 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q4
else if(pds==@q4 ^ ((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p2) | (p6 & ~p5) | (p7 & ~p5) | (p8 & ~p5))) then @q2
else if(pds==@q4 ^ (p5 & ~p1 & ~p2 & ~p3 & ~p4)) then @q5
else if(pds==@q4 ^ (p2 & ~p5 & ~p6 & ~p7 & ~p8)) then @q8
else if(pds==@q4 ^ (p2 & p5)) then @q9
else if(pds==@q5 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q5
else if(pds==@q5 ^ ((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p2) | (p5 & ~p6) | (p7 & ~p6) | (p8 & ~p6))) then @q2
else if(pds==@q5 ^ (p6 & ~p1 & ~p2 & ~p3 & ~p4)) then @q7
else if(pds==@q5 ^ (p2 & ~p5 & ~p6 & ~p7 & ~p8)) then @q9
else if(pds==@q5 ^ (p2 & p6)) then @q10
else if(pds==@q6 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q6
else if(pds==@q6 ^ ((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p1) | (p5 & ~p7) | (p6 & ~p7) | (p8 & ~p7))) then @q2
else if(pds==@q6 ^ (p7 & ~p1 & ~p2 & ~p3 & ~p4)) then @q11
else if(pds==@q6 ^ (p1 & ~p5 & ~p6 & ~p7 & ~p8)) then @q7
else if(pds==@q6 ^ (p1 & p7)) then @q12
else if(pds==@q7 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q7
else if(pds==@q7 ^ ((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p2) | (p5 & ~p7) | (p6 & ~p7) | (p8 & ~p7))) then @q2
else if(pds==@q7 ^ (p7 & ~p1 & ~p2 & ~p3 & ~p4)) then @q12
else if(pds==@q7 ^ (p2 & ~p5 & ~p6 & ~p7 & ~p8)) then @q10
else if(pds==@q7 ^ (p2 & p7)) then @q13
else if(pds==@q8 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q8
else if(pds==@q8 ^ ((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p3) | (p6 & ~p5) | (p7 & ~p5) | (p8 & ~p5))) then @q2
else if(pds==@q8 ^ (p5 & ~p1 & ~p2 & ~p3 & ~p4)) then @q9
else if(pds==@q8 ^ (p3 & ~p5 & ~p6 & ~p7 & ~p8)) then @q14
else if(pds==@q8 ^ (p3 & p5)) then @q15
else if(pds==@q9 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q9
else if(pds==@q9 ^ ((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p3) | (p5 & ~p6) | (p7 & ~p6) | (p8 & ~p6))) then @q2
else if(pds==@q9 ^ (p6 & ~p1 & ~p2 & ~p3 & ~p4)) then @q10
else if(pds==@q9 ^ (p3 & ~p5 & ~p6 & ~p7 & ~p8)) then @q15
else if(pds==@q9 ^ (p3 & p6)) then @q16
else if(pds==@q10 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q10
else if(pds==@q10 ^ ((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p3) | (p5 & ~p7) | (p6 & ~p7) | (p8 & ~p7))) then @q2
else if(pds==@q10 ^ (p7 & ~p1 & ~p2 & ~p3 & ~p4)) then @q13
else if(pds==@q10 ^ (p3 & ~p5 & ~p6 & ~p7 & ~p8)) then @q16
else if(pds==@q10 ^ (p3 & p7)) then @q17
else if(pds==@q11 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q11
else if(pds==@q11 ^ (p8 & ~p1 & ~p2 & ~p3 & ~p4)) then @q18
else if(pds==@q11 ^ ((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p1) | (p5 & ~p8) | (p6 & ~p8) | (p7 & ~p8))) then @q2
else if(pds==@q11 ^ (p1 & ~p5 & ~p6 & ~p7 & ~p8)) then @q12
else if(pds==@q11 ^ (p1 & p8)) then @q19
else if(pds==@q12 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q12
else if(pds==@q12 ^ (p8 & ~p1 & ~p2 & ~p3 & ~p4)) then @q19
else if(pds==@q12 ^ ((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p2) | (p5 & ~p8) | (p6 & ~p8) | (p7 & ~p8))) then @q2
else if(pds==@q12 ^ (p2 & ~p5 & ~p6 & ~p7 & ~p8)) then @q13
else if(pds==@q12 ^ (p2 & p8)) then @q20
else if(pds==@q13 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q13
else if(pds==@q13 ^ (p8 & ~p1 & ~p2 & ~p3 & ~p4)) then @q20
else if(pds==@q13 ^ ((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p3) | (p5 & ~p8) | (p6 & ~p8) | (p7 & ~p8))) then @q2
else if(pds==@q13 ^ (p3 & ~p5 & ~p6 & ~p7 & ~p8)) then @q17
else if(pds==@q13 ^ (p3 & p8)) then @q21
else if(pds==@q14 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q14
else if(pds==@q14 ^ ((p1 & ~p4) | (p2 & ~p4) | (p3 & ~p4) | (p6 & ~p5) | (p7 & ~p5) | (p8 & ~p5))) then @q2
else if(pds==@q14 ^ (p5 & ~p1 & ~p2 & ~p3 & ~p4)) then @q15
else if(pds==@q14 ^ (p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q22
else if(pds==@q14 ^ (p4 & p5)) then @q23
else if(pds==@q15 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q15
else if(pds==@q15 ^ ((p1 & ~p4) | (p2 & ~p4) | (p3 & ~p4) | (p5 & ~p6) | (p7 & ~p6) | (p8 & ~p6))) then @q2
else if(pds==@q15 ^ (p6 & ~p1 & ~p2 & ~p3 & ~p4)) then @q16
else if(pds==@q15 ^ (p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q23
else if(pds==@q15 ^ (p4 & p6)) then @q24
else if(pds==@q16 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q16
else if(pds==@q16 ^ ((p1 & ~p4) | (p2 & ~p4) | (p3 & ~p4) | (p5 & ~p7) | (p6 & ~p7) | (p8 & ~p7))) then @q2
else if(pds==@q16 ^ (p7 & ~p1 & ~p2 & ~p3 & ~p4)) then @q17
else if(pds==@q16 ^ (p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q24
else if(pds==@q16 ^ (p4 & p7)) then @q25
else if(pds==@q17 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q17
else if(pds==@q17 ^ (p8 & ~p1 & ~p2 & ~p3 & ~p4)) then @q21
else if(pds==@q17 ^ ((p1 & ~p4) | (p2 & ~p4) | (p3 & ~p4) | (p5 & ~p8) | (p6 & ~p8) | (p7 & ~p8))) then @q2
else if(pds==@q17 ^ (p4 & ~p5 & ~p6 & ~p7 & ~p8)) then @q25
else if(pds==@q17 ^ (p4 & p8)) then @q26
else if(pds==@q18 ^ (~p1 & ~p2 & ~p3 & ~p4)) then @q18
else if(pds==@q18 ^ (~p1 & (p2 | p3 | p4))) then @q2
else if(pds==@q18 ^ (p1)) then @q19
else if(pds==@q19 ^ (~p1 & ~p2 & ~p3 & ~p4)) then @q19
else if(pds==@q19 ^ (~p2 & (p1 | p3 | p4))) then @q2
else if(pds==@q19 ^ (p2)) then @q20
else if(pds==@q20 ^ (~p1 & ~p2 & ~p3 & ~p4)) then @q20
else if(pds==@q20 ^ (~p3 & (p1 | p2 | p4))) then @q2
else if(pds==@q20 ^ (p3)) then @q21
else if(pds==@q21 ^ (~p1 & ~p2 & ~p3 & ~p4)) then @q21
else if(pds==@q21 ^ (p4)) then @q26
else if(pds==@q21 ^ (~p4 & (p1 | p2 | p3))) then @q2
else if(pds==@q22 ^ (~p5 & ~p6 & ~p7 & ~p8)) then @q22
else if(pds==@q22 ^ (~p5 & (p6 | p7 | p8))) then @q2
else if(pds==@q22 ^ (p5)) then @q23
else if(pds==@q23 ^ (~p5 & ~p6 & ~p7 & ~p8)) then @q23
else if(pds==@q23 ^ (~p6 & (p5 | p7 | p8))) then @q2
else if(pds==@q23 ^ (p6)) then @q24
else if(pds==@q24 ^ (~p5 & ~p6 & ~p7 & ~p8)) then @q24
else if(pds==@q24 ^ (~p7 & (p5 | p6 | p8))) then @q2
else if(pds==@q24 ^ (p7)) then @q25
else if(pds==@q25 ^ (~p5 & ~p6 & ~p7 & ~p8)) then @q25
else if(pds==@q25 ^ (p8)) then @q26
else if(pds==@q25 ^ (~p8 & (p5 | p6 | p7))) then @q2
else if(pds==@q26 ^ (true)) then @q26
    else @q27;

    pds' = ds;

    as' =
    if(ds==@q1) then @1
else if(ds==@q3 | ds==@q4) then @2
else if(ds==@q11 | ds==@q14 | ds==@q5 | ds==@q6 | ds==@q8) then @3
else if(ds==@q18 | ds==@q22 | ds==@q7 | ds==@q9) then @4
else if(ds==@q19 | ds==@q23 | ds==@q10 | ds==@q12 | ds==@q15) then @5
else if(ds==@q13 | ds==@q16) then @6
else if(ds==@q17 | ds==@q20 | ds==@q24) then @7
else if(ds==@q21 | ds==@q25) then @8
else if(ds==@q2) then @9
else if(ds==@q26) then @10
else @11;

    pas' = as;
    };

    reward =
   if(as ~= @9) then
    0*[as==@1] + 7*[as==@2] + 14*[as==@3] + 21*[as==@4] + 28*[as==@5] + 35*[as==@6] + 42*[as==@7] + 49*[as==@8]
     + 100*[as==@10] - 0*[pas==@1] - 7*[pas==@2] - 14*[pas==@3] - 21*[pas==@4] - 28*[pas==@5] - 35*[pas==@6]
     - 42*[pas==@7] - 49*[pas==@8] - 100*[pas==@10]
    else 0;

    action-preconditions {
    	forall_{?d:dim} [ag-move(?d) >= MIN-ACTION-BOUND];
        forall_{?d:dim} [ag-move(?d) <= MAX-ACTION-BOUND];

    };

    termination{
    as == @9;
    as == @10;
    };

}




